{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bayesian Multilevel Modeling: Who will win the 2018 Premier League? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a fan of soccer and an aspiring engineering student I always thought it would be interesting to work on a data science project involving the sport I love. The goal of this project was to model the current form of teams in the 2018/2019 premier league and use that model to predict the final standings for the season. This is my first forey into Bayesian Modeling with PyMC3 and has been influenced by the following resources: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Original Paper:** http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.182.8659&rep=rep1&type=pdf \n",
    "\n",
    "**Source 1:** http://danielweitzenfeld.github.io/passtheroc/blog/2014/10/28/bayes-premier-league/\n",
    "\n",
    "**How I learnt PyMC3:** Bayesian Methods for Hackers \n",
    "\n",
    "**Data Source:** http://www.football-data.co.uk/data.php "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Development Plan "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-  Prepare Dataset: \n",
    "    -  Load Betting Data\n",
    "    -  Clean \n",
    "    -  Add 2019 fixtures \n",
    "\n",
    "-  Build Model: \n",
    "    -  Creat Shared Predictors, Encode Home and Away Teams as ints \n",
    "    -  Model Attack and Defence Rates\n",
    "    -  Model Home and away shots \n",
    "    -  Model Home Advantage \n",
    "    -  Train using 2018 game data\n",
    "    \n",
    "-  Simulate remainder of the Season"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ToDo / In development"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-  Add European Fixture Indicator to Dataset \n",
    "-  Model Fatigue \n",
    "-  Indicator for first team transfers \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Libraries:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries \n",
    "import pymc3 as pm3\n",
    "import theano\n",
    "import numpy as np \n",
    "import pandas as pd\n",
    "import seaborn as sns \n",
    "import matplotlib.pyplot as plt \n",
    "# for experimentation \n",
    "np.random.seed(10)\n",
    "# Inline plotting in jupyter\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define Functions for Analysis: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_standing(fixture_list, ppc, simulation):\n",
    "\n",
    "    fixture_list.loc[~fixture_list.played, \"FTAG\"] = ppc[\"away_goals\"][simulation]\n",
    "    fixture_list.loc[~fixture_list.played, \"FTHG\"] = ppc[\"home_goals\"][simulation]\n",
    "\n",
    "    fixture_list[\"homepoints\"] = (3 * (fixture_list.FTHG > fixture_list.FTAG)).fillna(0) + (1 * (fixture_list.FTHG == fixture_list.FTAG)).fillna(0)\n",
    "    fixture_list[\"awaypoints\"] = (3 * (fixture_list.FTAG > fixture_list.FTHG)).fillna(0) + (1 * (fixture_list.FTHG == fixture_list.FTAG)).fillna(0)\n",
    "\n",
    "    standing = fixture_list.groupby(\"HomeTeam\").homepoints.sum().to_frame().join(\n",
    "        fixture_list.groupby(\"AwayTeam\").awaypoints.sum()\n",
    "    ).join(\n",
    "        fixture_list.groupby(\"HomeTeam\").FTHG.sum()\n",
    "    ).join(\n",
    "        fixture_list.groupby(\"AwayTeam\").FTAG.sum()\n",
    "    ).join(\n",
    "        fixture_list.groupby(\"HomeTeam\").FTAG.sum().rename(\"homegoals_against\")\n",
    "    ).join(\n",
    "        fixture_list.groupby(\"AwayTeam\").FTHG.sum().rename(\"awaygoals_against\")\n",
    "    )\n",
    "\n",
    "    standing[\"points\"] = standing.homepoints + standing.awaypoints\n",
    "    standing[\"goals\"] = standing.FTHG + standing.FTAG\n",
    "    standing[\"goals_against\"] = standing.homegoals_against + standing.awaygoals_against\n",
    "    \n",
    "\n",
    "    return standing.sort_values([\"points\", \"goals\"], ascending = False).assign( rank = list(range(1, len(standing) + 1))).reset_index()\n",
    "\n",
    "def plot_probabilities(sims, simulation_2019):\n",
    "    simulations = pd.concat([get_standing(total_fixtures, simulation_2019, i) for i in range(sims)])\n",
    "    rankings_agg = simulations.groupby(\"HomeTeam\")['rank'].value_counts(normalize = True).unstack(1).fillna(0)\n",
    "    rankings_agg = rankings_agg.assign( expected = rankings_agg @ np.arange(n_teams + 1, 1, -1)).sort_values( \"expected\", ascending = False).drop(\"expected\", axis = \"columns\")\n",
    "    plt.figure(figsize = (15, 15))\n",
    "    sns.heatmap(rankings_agg, annot=True, fmt=\".0%\", cbar=False, cmap=\"ocean\")\n",
    "    plt.ylabel(\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dataset Prep:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get Played Fixtures Data \n",
    "data = pd.read_csv(\"soccer_data.csv\")\n",
    "# Get future games \n",
    "games_2019 = pd.read_csv(\"next_fixtures.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Div</th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>FTHG</th>\n",
       "      <th>FTAG</th>\n",
       "      <th>FTR</th>\n",
       "      <th>HTHG</th>\n",
       "      <th>HTAG</th>\n",
       "      <th>HTR</th>\n",
       "      <th>...</th>\n",
       "      <th>BbAv&lt;2.5</th>\n",
       "      <th>BbAH</th>\n",
       "      <th>BbAHh</th>\n",
       "      <th>BbMxAHH</th>\n",
       "      <th>BbAvAHH</th>\n",
       "      <th>BbMxAHA</th>\n",
       "      <th>BbAvAHA</th>\n",
       "      <th>PSCH</th>\n",
       "      <th>PSCD</th>\n",
       "      <th>PSCA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>E0</td>\n",
       "      <td>10/08/2018</td>\n",
       "      <td>Man United</td>\n",
       "      <td>Leicester</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>H</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>H</td>\n",
       "      <td>...</td>\n",
       "      <td>1.79</td>\n",
       "      <td>17</td>\n",
       "      <td>-0.75</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.70</td>\n",
       "      <td>2.29</td>\n",
       "      <td>2.21</td>\n",
       "      <td>1.55</td>\n",
       "      <td>4.07</td>\n",
       "      <td>7.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>E0</td>\n",
       "      <td>11/08/2018</td>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>Cardiff</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>H</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>H</td>\n",
       "      <td>...</td>\n",
       "      <td>1.83</td>\n",
       "      <td>20</td>\n",
       "      <td>-0.75</td>\n",
       "      <td>2.20</td>\n",
       "      <td>2.13</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.88</td>\n",
       "      <td>3.61</td>\n",
       "      <td>4.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>E0</td>\n",
       "      <td>11/08/2018</td>\n",
       "      <td>Fulham</td>\n",
       "      <td>Crystal Palace</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>A</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>...</td>\n",
       "      <td>1.87</td>\n",
       "      <td>22</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>2.18</td>\n",
       "      <td>2.11</td>\n",
       "      <td>1.81</td>\n",
       "      <td>1.77</td>\n",
       "      <td>2.62</td>\n",
       "      <td>3.38</td>\n",
       "      <td>2.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>E0</td>\n",
       "      <td>11/08/2018</td>\n",
       "      <td>Huddersfield</td>\n",
       "      <td>Chelsea</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>A</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>A</td>\n",
       "      <td>...</td>\n",
       "      <td>1.84</td>\n",
       "      <td>23</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.84</td>\n",
       "      <td>1.80</td>\n",
       "      <td>2.13</td>\n",
       "      <td>2.06</td>\n",
       "      <td>7.24</td>\n",
       "      <td>3.95</td>\n",
       "      <td>1.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>E0</td>\n",
       "      <td>11/08/2018</td>\n",
       "      <td>Newcastle</td>\n",
       "      <td>Tottenham</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>A</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>A</td>\n",
       "      <td>...</td>\n",
       "      <td>1.81</td>\n",
       "      <td>20</td>\n",
       "      <td>0.25</td>\n",
       "      <td>2.20</td>\n",
       "      <td>2.12</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1.76</td>\n",
       "      <td>4.74</td>\n",
       "      <td>3.53</td>\n",
       "      <td>1.89</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 62 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Div        Date      HomeTeam        AwayTeam  FTHG  FTAG FTR  HTHG  HTAG  \\\n",
       "0  E0  10/08/2018    Man United       Leicester     2     1   H     1     0   \n",
       "1  E0  11/08/2018   Bournemouth         Cardiff     2     0   H     1     0   \n",
       "2  E0  11/08/2018        Fulham  Crystal Palace     0     2   A     0     1   \n",
       "3  E0  11/08/2018  Huddersfield         Chelsea     0     3   A     0     2   \n",
       "4  E0  11/08/2018     Newcastle       Tottenham     1     2   A     1     2   \n",
       "\n",
       "  HTR  ...  BbAv<2.5  BbAH  BbAHh  BbMxAHH  BbAvAHH  BbMxAHA  BbAvAHA  PSCH  \\\n",
       "0   H  ...      1.79    17  -0.75     1.75     1.70     2.29     2.21  1.55   \n",
       "1   H  ...      1.83    20  -0.75     2.20     2.13     1.80     1.75  1.88   \n",
       "2   A  ...      1.87    22  -0.25     2.18     2.11     1.81     1.77  2.62   \n",
       "3   A  ...      1.84    23   1.00     1.84     1.80     2.13     2.06  7.24   \n",
       "4   A  ...      1.81    20   0.25     2.20     2.12     1.80     1.76  4.74   \n",
       "\n",
       "   PSCD  PSCA  \n",
       "0  4.07  7.69  \n",
       "1  3.61  4.70  \n",
       "2  3.38  2.90  \n",
       "3  3.95  1.58  \n",
       "4  3.53  1.89  \n",
       "\n",
       "[5 rows x 62 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(5) # Check if data is loaded correctly "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Cleaning: Remove irrelevant columns\n",
    "data = data.drop([\"Div\",\"Referee\", \"FTR\", \"HTR\"], axis = 1 )\n",
    "# Data from a betting site, drop all non sporting columns \n",
    "data = data.iloc[:, 0:19]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>FTHG</th>\n",
       "      <th>FTAG</th>\n",
       "      <th>HTHG</th>\n",
       "      <th>HTAG</th>\n",
       "      <th>HS</th>\n",
       "      <th>AS</th>\n",
       "      <th>HST</th>\n",
       "      <th>AST</th>\n",
       "      <th>HF</th>\n",
       "      <th>AF</th>\n",
       "      <th>HC</th>\n",
       "      <th>AC</th>\n",
       "      <th>HY</th>\n",
       "      <th>AY</th>\n",
       "      <th>HR</th>\n",
       "      <th>AR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10/08/2018</td>\n",
       "      <td>Man United</td>\n",
       "      <td>Leicester</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>11</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11/08/2018</td>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>Cardiff</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11/08/2018</td>\n",
       "      <td>Fulham</td>\n",
       "      <td>Crystal Palace</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11/08/2018</td>\n",
       "      <td>Huddersfield</td>\n",
       "      <td>Chelsea</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11/08/2018</td>\n",
       "      <td>Newcastle</td>\n",
       "      <td>Tottenham</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date      HomeTeam        AwayTeam  FTHG  FTAG  HTHG  HTAG  HS  AS  \\\n",
       "0  10/08/2018    Man United       Leicester     2     1     1     0   8  13   \n",
       "1  11/08/2018   Bournemouth         Cardiff     2     0     1     0  12  10   \n",
       "2  11/08/2018        Fulham  Crystal Palace     0     2     0     1  15  10   \n",
       "3  11/08/2018  Huddersfield         Chelsea     0     3     0     2   6  13   \n",
       "4  11/08/2018     Newcastle       Tottenham     1     2     1     2  15  15   \n",
       "\n",
       "   HST  AST  HF  AF  HC  AC  HY  AY  HR  AR  \n",
       "0    6    4  11   8   2   5   2   1   0   0  \n",
       "1    4    1  11   9   7   4   1   1   0   0  \n",
       "2    6    9   9  11   5   5   1   2   0   0  \n",
       "3    1    4   9   8   2   5   2   1   0   0  \n",
       "4    2    5  11  12   3   5   2   2   0   0  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check is cleaning is correct \n",
    "data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12/01/2019 12:30</td>\n",
       "      <td>West Ham</td>\n",
       "      <td>Arsenal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12/01/2019 15:00</td>\n",
       "      <td>Brighton</td>\n",
       "      <td>Liverpool</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12/01/2019 15:00</td>\n",
       "      <td>Burnley</td>\n",
       "      <td>Fulham</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12/01/2019 15:00</td>\n",
       "      <td>Cardiff</td>\n",
       "      <td>Huddersfield</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12/01/2019 15:00</td>\n",
       "      <td>Crystal Palace</td>\n",
       "      <td>Watford</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Date        HomeTeam      AwayTeam\n",
       "0  12/01/2019 12:30        West Ham       Arsenal\n",
       "1  12/01/2019 15:00        Brighton     Liverpool\n",
       "2  12/01/2019 15:00         Burnley        Fulham\n",
       "3  12/01/2019 15:00         Cardiff  Huddersfield\n",
       "4  12/01/2019 15:00  Crystal Palace       Watford"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Clean 2019 games data \n",
    "games_2019 = games_2019.drop(\"Result\",axis = 1)\n",
    "games_2019.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\ncalen\\myenv\\lib\\site-packages\\ipykernel_launcher.py:2: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "# Merge the two Data frames \n",
    "total_fixtures = pd.concat([data,games_2019], axis=0)\n",
    "total_fixtures = total_fixtures.reset_index()\n",
    "total_fixtures = total_fixtures.drop(\"index\", axis = 1)\n",
    "# Change to date to python date time format \n",
    "total_fixtures['Date'] =  pd.to_datetime(total_fixtures['Date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add the played game column \n",
    "total_fixtures['played'] = True # True if played, else False \n",
    "# Correctly Assign game status\n",
    "for game in range(0,len(total_fixtures)):\n",
    "    if np.isnan(total_fixtures.loc[game,'AC']):\n",
    "        total_fixtures.loc[game,'played'] = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AC</th>\n",
       "      <th>AF</th>\n",
       "      <th>AR</th>\n",
       "      <th>AS</th>\n",
       "      <th>AST</th>\n",
       "      <th>AY</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Date</th>\n",
       "      <th>FTAG</th>\n",
       "      <th>FTHG</th>\n",
       "      <th>HC</th>\n",
       "      <th>HF</th>\n",
       "      <th>HR</th>\n",
       "      <th>HS</th>\n",
       "      <th>HST</th>\n",
       "      <th>HTAG</th>\n",
       "      <th>HTHG</th>\n",
       "      <th>HY</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>played</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Leicester</td>\n",
       "      <td>2018-10-08</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Man United</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Cardiff</td>\n",
       "      <td>2018-11-08</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Crystal Palace</td>\n",
       "      <td>2018-11-08</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Fulham</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Chelsea</td>\n",
       "      <td>2018-11-08</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Huddersfield</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Tottenham</td>\n",
       "      <td>2018-11-08</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Newcastle</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    AC    AF   AR    AS  AST   AY        AwayTeam       Date  FTAG  FTHG   HC  \\\n",
       "0  5.0   8.0  0.0  13.0  4.0  1.0       Leicester 2018-10-08   1.0   2.0  2.0   \n",
       "1  4.0   9.0  0.0  10.0  1.0  1.0         Cardiff 2018-11-08   0.0   2.0  7.0   \n",
       "2  5.0  11.0  0.0  10.0  9.0  2.0  Crystal Palace 2018-11-08   2.0   0.0  5.0   \n",
       "3  5.0   8.0  0.0  13.0  4.0  1.0         Chelsea 2018-11-08   3.0   0.0  2.0   \n",
       "4  5.0  12.0  0.0  15.0  5.0  2.0       Tottenham 2018-11-08   2.0   1.0  3.0   \n",
       "\n",
       "     HF   HR    HS  HST  HTAG  HTHG   HY      HomeTeam  played  \n",
       "0  11.0  0.0   8.0  6.0   0.0   1.0  2.0    Man United    True  \n",
       "1  11.0  0.0  12.0  4.0   0.0   1.0  1.0   Bournemouth    True  \n",
       "2   9.0  0.0  15.0  6.0   1.0   0.0  1.0        Fulham    True  \n",
       "3   9.0  0.0   6.0  1.0   2.0   0.0  2.0  Huddersfield    True  \n",
       "4  11.0  0.0  15.0  2.0   2.0   1.0  2.0     Newcastle    True  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check if correctly merged \n",
    "total_fixtures.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AC</th>\n",
       "      <th>AF</th>\n",
       "      <th>AR</th>\n",
       "      <th>AS</th>\n",
       "      <th>AST</th>\n",
       "      <th>AY</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Date</th>\n",
       "      <th>FTAG</th>\n",
       "      <th>FTHG</th>\n",
       "      <th>HC</th>\n",
       "      <th>HF</th>\n",
       "      <th>HR</th>\n",
       "      <th>HS</th>\n",
       "      <th>HST</th>\n",
       "      <th>HTAG</th>\n",
       "      <th>HTHG</th>\n",
       "      <th>HY</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>played</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>375</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Wolves</td>\n",
       "      <td>2019-12-05 15:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Liverpool</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cardiff</td>\n",
       "      <td>2019-12-05 15:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Man Utd</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Huddersfield</td>\n",
       "      <td>2019-12-05 15:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Southampton</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>378</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Everton</td>\n",
       "      <td>2019-12-05 15:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Spurs</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>West Ham</td>\n",
       "      <td>2019-12-05 15:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Watford</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     AC  AF  AR  AS  AST  AY      AwayTeam                Date  FTAG  FTHG  \\\n",
       "375 NaN NaN NaN NaN  NaN NaN        Wolves 2019-12-05 15:00:00   NaN   NaN   \n",
       "376 NaN NaN NaN NaN  NaN NaN       Cardiff 2019-12-05 15:00:00   NaN   NaN   \n",
       "377 NaN NaN NaN NaN  NaN NaN  Huddersfield 2019-12-05 15:00:00   NaN   NaN   \n",
       "378 NaN NaN NaN NaN  NaN NaN       Everton 2019-12-05 15:00:00   NaN   NaN   \n",
       "379 NaN NaN NaN NaN  NaN NaN      West Ham 2019-12-05 15:00:00   NaN   NaN   \n",
       "\n",
       "     HC  HF  HR  HS  HST  HTAG  HTHG  HY     HomeTeam  played  \n",
       "375 NaN NaN NaN NaN  NaN   NaN   NaN NaN    Liverpool   False  \n",
       "376 NaN NaN NaN NaN  NaN   NaN   NaN NaN      Man Utd   False  \n",
       "377 NaN NaN NaN NaN  NaN   NaN   NaN NaN  Southampton   False  \n",
       "378 NaN NaN NaN NaN  NaN   NaN   NaN NaN        Spurs   False  \n",
       "379 NaN NaN NaN NaN  NaN   NaN   NaN NaN      Watford   False  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_fixtures.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nothing wrong with this dataframe. Features are now just in alphabetical order. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Man United', 'Bournemouth', 'Fulham', 'Huddersfield', 'Newcastle',\n",
       "       'Watford', 'Wolves', 'Arsenal', 'Liverpool', 'Southampton',\n",
       "       'Cardiff', 'Chelsea', 'Everton', 'Leicester', 'Tottenham',\n",
       "       'West Ham', 'Brighton', 'Burnley', 'Man City', 'Crystal Palace',\n",
       "       'Spurs', 'Man Utd'], dtype=object)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check name convensions for each team are the same \n",
    "total_fixtures.HomeTeam.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Looks like we have some mismatched team names from the data sets. Change so that they are the same.  \n",
    "for game in range(0,len(total_fixtures)):\n",
    "    if total_fixtures.loc[game,'HomeTeam'] == 'Man Utd':\n",
    "        total_fixtures.loc[game,'HomeTeam'] = 'Man United'\n",
    "    if total_fixtures.loc[game,'AwayTeam'] == 'Man Utd':\n",
    "        total_fixtures.loc[game,'AwayTeam'] = 'Man United'\n",
    "    \n",
    "    if total_fixtures.loc[game,'HomeTeam'] == 'Spurs':\n",
    "        total_fixtures.loc[game,'HomeTeam'] = 'Tottenham'\n",
    "    if total_fixtures.loc[game,'AwayTeam'] == 'Spurs':\n",
    "        total_fixtures.loc[game,'AwayTeam'] = 'Tottenham'\n",
    "        \n",
    "# Home and Away Teams must be the catagory dtype: \n",
    "total_fixtures['HomeTeam'] = total_fixtures['HomeTeam'].astype('category')\n",
    "total_fixtures['AwayTeam'] = total_fixtures['AwayTeam'].astype('category')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For clarity, lets list the poorly named features in the dataset and describe their true meaning: \n",
    "\n",
    "-  AC = Away Team Corners\n",
    "-  AF = Away Team Fouls\n",
    "-  AR = Away Team Red Cards \n",
    "-  AS = Away Team Shots \n",
    "-  AST = Away Team Shots on Target \n",
    "-  AY = Away Team Yellow Cards  \n",
    "-  FTAG = Full Time away goals \n",
    "-  FTHG = Full Time Home Team Goals \n",
    "-  HC = Home Team Corners \n",
    "-  HF = Home Team Fouls Commited \n",
    "-  HR = Home Team Red Cards \n",
    "-  HS = Home Team Shots\n",
    "-  HST = Home Team Shots on Target\n",
    "-  HTAG = Half Time Away Goals \n",
    "-  HTHG = Half Time Home Goals\n",
    "-  HY = Home Team Yellow Cards"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And finally the Finalized Data Set info: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 380 entries, 0 to 379\n",
      "Data columns (total 20 columns):\n",
      "AC          210 non-null float64\n",
      "AF          210 non-null float64\n",
      "AR          210 non-null float64\n",
      "AS          210 non-null float64\n",
      "AST         210 non-null float64\n",
      "AY          210 non-null float64\n",
      "AwayTeam    380 non-null category\n",
      "Date        380 non-null datetime64[ns]\n",
      "FTAG        210 non-null float64\n",
      "FTHG        210 non-null float64\n",
      "HC          210 non-null float64\n",
      "HF          210 non-null float64\n",
      "HR          210 non-null float64\n",
      "HS          210 non-null float64\n",
      "HST         210 non-null float64\n",
      "HTAG        210 non-null float64\n",
      "HTHG        210 non-null float64\n",
      "HY          210 non-null float64\n",
      "HomeTeam    380 non-null category\n",
      "played      380 non-null bool\n",
      "dtypes: bool(1), category(2), datetime64[ns](1), float64(16)\n",
      "memory usage: 53.2 KB\n"
     ]
    }
   ],
   "source": [
    "total_fixtures.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AC                 float64\n",
       "AF                 float64\n",
       "AR                 float64\n",
       "AS                 float64\n",
       "AST                float64\n",
       "AY                 float64\n",
       "AwayTeam          category\n",
       "Date        datetime64[ns]\n",
       "FTAG               float64\n",
       "FTHG               float64\n",
       "HC                 float64\n",
       "HF                 float64\n",
       "HR                 float64\n",
       "HS                 float64\n",
       "HST                float64\n",
       "HTAG               float64\n",
       "HTHG               float64\n",
       "HY                 float64\n",
       "HomeTeam          category\n",
       "played                bool\n",
       "dtype: object"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_fixtures.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks good! Lets start the model building. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Teams:  20\n"
     ]
    }
   ],
   "source": [
    "n_teams = len(total_fixtures.HomeTeam.unique()) # Number of teams in the league \n",
    "print(\"Number of Teams: \", n_teams) # Confirm right number of teams \n",
    "# Seperate Dataset into matches played and not played\n",
    "played = total_fixtures[total_fixtures.played]\n",
    "not_played = total_fixtures[~total_fixtures.played]\n",
    "# create shared predictors. We can change these easily later for matches we want to predict!\n",
    "hometeam = theano.shared(played.HomeTeam.cat.codes.astype('int8').values)\n",
    "awayteam = theano.shared(played.AwayTeam.cat.codes.astype('int8').values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling Attack and Defensive Rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "# See paper by Biao et. al. for all model mathematics \n",
    "with pm3.Model() as model:\n",
    "    # For Team Attack Rate \n",
    "    # Set Hyperpriors \n",
    "    param_attack = pm3.Normal('param_attack', 0, 1) # var name, mean, std \n",
    "    param_attack_sd = pm3.Gamma('param_attack_sd', 2, 2)\n",
    "    param_attack_nc = pm3.Normal('param_attack_nc', 0, 1, shape = n_teams) # For each team \n",
    "    # Create the Deterministic Function Dependent on the other params \n",
    "    attack_rate = pm3.Deterministic('attack_rate', param_attack + param_attack_nc * param_attack_sd) # name, parent var\n",
    "    # Note on parent var: parameter that influences the other parameters. Initial guess does not matter. \n",
    "    # For Team Defense Rate \n",
    "    param_defense_nc = pm3.Normal('param_defense_nc', 0, 1, shape = n_teams) # For each team \n",
    "    param_defense_sd = pm3.Gamma('param_defense_sd', 2, 2) \n",
    "    defense_rate = pm3.Deterministic('defense_rate', param_defense_nc * param_defense_sd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling Shots on Target: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare a distribution that will model a shots on target rate \n",
    "with model: \n",
    "    # Home Team \n",
    "    param_shots_home_hyper_sd = pm3.Gamma('param_shots_home_hyper_sd', 1, 1)\n",
    "    home_shots_nc = pm3.Normal('home_shots_nc', 2, 1, shape = n_teams)\n",
    "    home_shots = pm3.Deterministic('home_shots', home_shots_nc * param_shots_home_hyper_sd )\n",
    "    # Away Team \n",
    "    param_shots_away_hyper_sd = pm3.Gamma('param_shots_away_hyper_sd', 1, 1)\n",
    "    away_shots_nc = pm3.Normal('away_shots_nc', 2, 1, shape = n_teams)\n",
    "    away_shots = pm3.Deterministic('away_shots', away_shots_nc * param_shots_away_hyper_sd) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling the Home Advantage "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Accroding to the paper teams typically have a home advantage. Roar of the crowd, e.t.c. \n",
    "with model:\n",
    "    # Attack Params\n",
    "    param_attack_hyper_sd = pm3.Gamma('param_attack_hyper_sd', 2, 2)\n",
    "    param_attack_home_hyper = pm3.Normal('param_attack_home_hyper', 0, 1)\n",
    "    parma_attack_home_nc = pm3.Normal('parma_attack_home_nc', 0, 1, shape = n_teams)    \n",
    "    home_attack_advantage = pm3.Deterministic('home_attack_advantage', param_attack_home_hyper + \n",
    "                                             parma_attack_home_nc * param_attack_hyper_sd)\n",
    "    # Defensive Params \n",
    "    home_defense_hyper = pm3.Normal('home_defense_hyper', 0, 1)\n",
    "    home_defense_hyper_sd = pm3.Gamma(\"home_defense_hyper_sd\", 2, 2)\n",
    "    home_defense_nc = pm3.Normal('home_defense_nc', 0, 1, shape = n_teams)\n",
    "    home_defense_advantage = pm3.Deterministic('home_defense_advantage', home_defense_hyper + home_defense_nc * home_defense_hyper_sd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Putting it All Together:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "with model:\n",
    "    # Prepare the parent vars for the exponential link of the Poisson Distribution - Goals scored distribution \n",
    "    home_diff = attack_rate[hometeam] - defense_rate[awayteam] + home_attack_advantage[hometeam] + home_shots[hometeam]\n",
    "    away_diff = attack_rate[awayteam] - defense_rate[hometeam] - home_defense_advantage[hometeam] + away_shots[awayteam]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "with model:\n",
    "    # observed parameter is our real life observations. Used to update our prior beleifs (those distributions I created)\n",
    "    # in Bayesian Fashion \n",
    "    home_goals = pm3.Poisson('home_goals', pm3.math.exp(home_diff), observed = played.FTHG.values) # Link with home_diff var\n",
    "    away_goals = pm3.Poisson('away_goals', pm3.math.exp(away_diff), observed = played.FTAG.values) # link with away_diff var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Auto-assigning NUTS sampler...\n",
      "Initializing NUTS using jitter+adapt_diag...\n",
      "Multiprocess sampling (4 chains in 4 jobs)\n",
      "NUTS: [home_defense_nc, home_defense_hyper_sd, home_defense_hyper, parma_attack_home_nc, param_attack_home_hyper, param_attack_hyper_sd, away_shots_nc, param_shots_away_hyper_sd, home_shots_nc, param_shots_home_hyper_sd, param_defense_sd, param_defense_nc, param_attack_nc, param_attack_sd, param_attack]\n"
     ]
    }
   ],
   "source": [
    "with model:\n",
    "    trained_model = pm3.sample(1000, tune=1000, cores=4, progressbar =False) # Run Model. Same as training the model. \n",
    "\n",
    "pm3.traceplot(trained_model);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\ncalen\\myenv\\lib\\site-packages\\ipykernel_launcher.py:6: DeprecationWarning: sample_ppc() is deprecated.  Please use sample_posterior_predictive()\n",
      "  \n",
      "100%|█████████████████████████████████████████████████████████████████████████████| 1000/1000 [00:04<00:00, 214.32it/s]\n"
     ]
    }
   ],
   "source": [
    "# Switching. Now make predictions by sampling the posteriors.  \n",
    "hometeam.set_value(not_played.HomeTeam.cat.codes.astype('int8').values)\n",
    "awayteam.set_value(not_played.AwayTeam.cat.codes.astype('int8').values)\n",
    "\n",
    "with model: # Simulate games over 1000 simulated seasons \n",
    "    simulation_2019 = pm3.sample_ppc(trained_model, samples = 1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>homepoints</th>\n",
       "      <th>awaypoints</th>\n",
       "      <th>FTHG</th>\n",
       "      <th>FTAG</th>\n",
       "      <th>homegoals_against</th>\n",
       "      <th>awaygoals_against</th>\n",
       "      <th>points</th>\n",
       "      <th>goals</th>\n",
       "      <th>goals_against</th>\n",
       "      <th>rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Liverpool</td>\n",
       "      <td>51</td>\n",
       "      <td>44</td>\n",
       "      <td>46.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>95</td>\n",
       "      <td>90.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Man City</td>\n",
       "      <td>44</td>\n",
       "      <td>42</td>\n",
       "      <td>58.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>86</td>\n",
       "      <td>99.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Tottenham</td>\n",
       "      <td>44</td>\n",
       "      <td>40</td>\n",
       "      <td>42.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>84</td>\n",
       "      <td>86.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chelsea</td>\n",
       "      <td>35</td>\n",
       "      <td>37</td>\n",
       "      <td>28.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>72</td>\n",
       "      <td>62.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Man United</td>\n",
       "      <td>38</td>\n",
       "      <td>33</td>\n",
       "      <td>36.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>71</td>\n",
       "      <td>76.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>42</td>\n",
       "      <td>22</td>\n",
       "      <td>39.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>64</td>\n",
       "      <td>71.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Leicester</td>\n",
       "      <td>35</td>\n",
       "      <td>26</td>\n",
       "      <td>29.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>61</td>\n",
       "      <td>47.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>35</td>\n",
       "      <td>16</td>\n",
       "      <td>38.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>51</td>\n",
       "      <td>60.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Crystal Palace</td>\n",
       "      <td>28</td>\n",
       "      <td>23</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>51</td>\n",
       "      <td>40.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>West Ham</td>\n",
       "      <td>27</td>\n",
       "      <td>23</td>\n",
       "      <td>28.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>50</td>\n",
       "      <td>55.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Watford</td>\n",
       "      <td>28</td>\n",
       "      <td>21</td>\n",
       "      <td>24.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>49</td>\n",
       "      <td>47.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Wolves</td>\n",
       "      <td>25</td>\n",
       "      <td>23</td>\n",
       "      <td>23.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>48</td>\n",
       "      <td>42.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Everton</td>\n",
       "      <td>26</td>\n",
       "      <td>17</td>\n",
       "      <td>27.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>43</td>\n",
       "      <td>53.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Brighton</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>28.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>42</td>\n",
       "      <td>43.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Southampton</td>\n",
       "      <td>18</td>\n",
       "      <td>20</td>\n",
       "      <td>24.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>38</td>\n",
       "      <td>46.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Newcastle</td>\n",
       "      <td>15</td>\n",
       "      <td>19</td>\n",
       "      <td>15.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>34</td>\n",
       "      <td>29.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Cardiff</td>\n",
       "      <td>21</td>\n",
       "      <td>10</td>\n",
       "      <td>21.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>31</td>\n",
       "      <td>33.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Burnley</td>\n",
       "      <td>17</td>\n",
       "      <td>12</td>\n",
       "      <td>21.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>29</td>\n",
       "      <td>34.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Fulham</td>\n",
       "      <td>18</td>\n",
       "      <td>11</td>\n",
       "      <td>20.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>29</td>\n",
       "      <td>32.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Huddersfield</td>\n",
       "      <td>17</td>\n",
       "      <td>11</td>\n",
       "      <td>16.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>28</td>\n",
       "      <td>28.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          HomeTeam  homepoints  awaypoints  FTHG  FTAG  homegoals_against  \\\n",
       "0        Liverpool          51          44  46.0  44.0                9.0   \n",
       "1         Man City          44          42  58.0  41.0               24.0   \n",
       "2        Tottenham          44          40  42.0  44.0               17.0   \n",
       "3          Chelsea          35          37  28.0  34.0               18.0   \n",
       "4       Man United          38          33  36.0  40.0               20.0   \n",
       "5          Arsenal          42          22  39.0  32.0               16.0   \n",
       "6        Leicester          35          26  29.0  18.0               18.0   \n",
       "7      Bournemouth          35          16  38.0  22.0               25.0   \n",
       "8   Crystal Palace          28          23  18.0  22.0               15.0   \n",
       "9         West Ham          27          23  28.0  27.0               27.0   \n",
       "10         Watford          28          21  24.0  23.0               24.0   \n",
       "11          Wolves          25          23  23.0  19.0               20.0   \n",
       "12         Everton          26          17  27.0  26.0               32.0   \n",
       "13        Brighton          30          12  28.0  15.0               21.0   \n",
       "14     Southampton          18          20  24.0  22.0               31.0   \n",
       "15       Newcastle          15          19  15.0  14.0               26.0   \n",
       "16         Cardiff          21          10  21.0  12.0               39.0   \n",
       "17         Burnley          17          12  21.0  13.0               36.0   \n",
       "18          Fulham          18          11  20.0  12.0               48.0   \n",
       "19    Huddersfield          17          11  16.0  12.0               26.0   \n",
       "\n",
       "    awaygoals_against  points  goals  goals_against  rank  \n",
       "0                11.0      95   90.0           20.0     1  \n",
       "1                15.0      86   99.0           39.0     2  \n",
       "2                24.0      84   86.0           41.0     3  \n",
       "3                21.0      72   62.0           39.0     4  \n",
       "4                28.0      71   76.0           48.0     5  \n",
       "5                42.0      64   71.0           58.0     6  \n",
       "6                23.0      61   47.0           41.0     7  \n",
       "7                43.0      51   60.0           68.0     8  \n",
       "8                27.0      51   40.0           42.0     9  \n",
       "9                31.0      50   55.0           58.0    10  \n",
       "10               29.0      49   47.0           53.0    11  \n",
       "11               21.0      48   42.0           41.0    12  \n",
       "12               32.0      43   53.0           64.0    13  \n",
       "13               31.0      42   43.0           52.0    14  \n",
       "14               31.0      38   46.0           62.0    15  \n",
       "15               29.0      34   29.0           55.0    16  \n",
       "16               34.0      31   33.0           73.0    17  \n",
       "17               39.0      29   34.0           75.0    18  \n",
       "18               41.0      29   32.0           89.0    19  \n",
       "19               29.0      28   28.0           55.0    20  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_standing(total_fixtures, simulation_2019, 996) # Show an example standing i.e. standing according to simulation 996"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the positon probabilities after n experiments: \n",
    "plot_probabilities(999, simulation_2019)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# END"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
